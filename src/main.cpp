#include "Common.h"
#include "Graphics.h"

float verts[] = { 0.0f, 1.0f, 0.0f,   //Top
-1.0f, -1.0f, 0.0f, //Bottom Left
1.0f, -1.0f, 0.0f	 //Bottom Right
};

GLuint VBO;

void render()
{
	//Set the clea colour(background)
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
	
	//Clear the colour and depth buffer
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	//Switch to ModelView
	glMatrixMode(GL_MODELVIEW);
	//Reset using the identity matrix
	glLoadIdentity();
	//Translate to -5.0f on z-axis
	glTranslatef(0.0f, 0.0f, -5.0f);
	//Begin drawing triangles
	glBegin(GL_QUADS);
			glColor3f(1.0f, 0.0f, 0.0f); //Colour of the vertices
			glVertex3f(-1.0f, 1.0f, 0.0f); //Top
			glVertex3f(-1.0f, -1.0f, 0.0f); //Bottom Left
			glVertex3f(1.0f, -1.0f, 0.0f); //Bottom Right
			glVertex3f(1.0f, 1.0f, 0.0f);
	glEnd();

}

void update()

{
	
}

void initScene()
{
	//Create buffer
	glGenBuffers(1, &VBO);
	//Make the new VBO active
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	//Copy Vertext Data to VBO
	glBufferData(GL_ARRAY_BUFFER, sizeof(verts), verts, GL_STATIC_DRAW);


}

void cleanUp()
{
	glDeleteBuffers(1, &VBO);
}

int main(int argc, char * arg[])
{
	bool run = true;

	//init everything - SDL, if it is nonzero we have a problem
	if (SDL_Init(SDL_INIT_EVERYTHING) != 0)
	{
		std::cout << "ERROR SDL_Init" << SDL_GetError() << std::endl;

		return -1;
	}

	//Create Window
	SDL_Window * window = SDL_CreateWindow("SDL", // Window title
						SDL_WINDOWPOS_CENTERED,  // x position, centered
						SDL_WINDOWPOS_CENTERED,  // y position, centered
						640,					 // Width, in pixels
						480,					 // height, in pixels
						SDL_WINDOW_OPENGL		 // flags
						);

	//Creat an OpenGL context associated with the window
	SDL_GLContext glcontext = SDL_GL_CreateContext(window);

	//Initilisation
	//Call our InitOpenGL Function
	initOpenGL();
	initScene();
	//Set our viewport
	//setViewport(640, 480);

	//Value to hold the event generated by SDL
	SDL_Event event;
	//Game Loop
	while (run)
	{
		//While we still have events in the queu
		while (SDL_PollEvent(&event))
		{
			//Get event type
			if (event.type == SDL_QUIT || event.type == SDL_WINDOWEVENT_CLOSE)
			{
				//Set our boolean which controls the loop to false
				run = false;
			}
		}

		//update
		update();
		//Then draw
		render();

		//Call swap so that our GL back buffer is displayed
		SDL_GL_SwapWindow(window);

	}

	//Clean up, reverse order!!!
	cleanUp();
	SDL_GL_DeleteContext(glcontext);
	SDL_DestroyWindow(window);
	SDL_Quit();
	return 0;
}
